{"version":3,"sources":["components/CharInfo.js","components/CharacterList.js","containers/App.js","serviceWorker.js","index.js"],"names":["CharInfo","props","state","expanded","open","bind","close","this","setState","info","charInfo","className","onClick","gender","height","mass","hair_color","eye_color","Component","CharacterList","people","map","p","key","url","name","App","getPeople","fetch","then","response","json","data","results","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yOA4CeA,G,wDAzCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,UAAU,GAGd,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBARE,E,mDAYfE,KAAKC,SAAS,CAAEL,UAAWI,KAAKL,MAAMC,a,8BAItCI,KAAKC,SAAS,CAAEL,UAAWI,KAAKL,MAAMC,a,+BAItC,IAAMM,EAAOF,KAAKN,MAAMS,SACxB,OAAKH,KAAKL,MAAMC,SAIR,yBAAKQ,UAAU,gBACX,uBAAGA,UAAU,iBAAiBC,QAASL,KAAKD,OAA5C,aACA,4BACI,4BAAI,uCAAaG,EAAKI,SACtB,4BAAI,uCAAaJ,EAAKK,OAAlB,OACJ,4BAAI,qCAAWL,EAAKM,KAAhB,OACJ,4BAAI,2CAAiBN,EAAKO,aAC1B,4BAAI,0CAAgBP,EAAKQ,cAV9B,uBAAGN,UAAU,eAAeC,QAASL,KAAKH,MAA1C,iB,GAvBIc,cCqBRC,E,uKAlBP,IAAMC,EAASb,KAAKN,MAAMmB,OAC1B,OACE,yBAAKT,UAAU,gBAETS,EAAOC,KAAI,SAACC,GACR,OACI,yBAAKC,IAAKD,EAAEE,KACR,wBAAIb,UAAU,aAAaW,EAAEG,MAC7B,kBAAC,EAAD,CAAUf,SAAUY,a,GAVpBJ,aCkCbQ,E,kDAhCb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXkB,OAAQ,IAGV,EAAKO,UAAY,EAAKA,UAAUtB,KAAf,gBAPA,E,wDAUN,IAAD,OACV,OAAOuB,MAAM,qCACZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GACJ,EAAKxB,SAAS,CAAEY,OAAQY,EAAKC,e,0CAK/B1B,KAAKoB,c,+BAEG,IACDP,EAAUb,KAAKL,MAAfkB,OACP,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,CAAeS,OAAUA,S,GA1BfF,aCQEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.31d3fb44.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass CharInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n\r\n        this.open = this.open.bind(this);\r\n        this.close = this.close.bind(this);\r\n    }\r\n\r\n    open() {\r\n        this.setState({ expanded: !this.state.expanded})\r\n    }\r\n\r\n    close() {\r\n        this.setState({ expanded: !this.state.expanded})\r\n    }\r\n\r\n    render() {\r\n        const info = this.props.charInfo;\r\n        if (!this.state.expanded) {\r\n            return <p className=\"btn btn-info\" onClick={this.open}>Show Info</p>\r\n        } else {\r\n            return(\r\n                <div className=\"user-details\">\r\n                    <p className=\"btn btn-danger\" onClick={this.close}>Hide Info</p>\r\n                    <ul>\r\n                        <li><h3>Gender: {info.gender}</h3></li>\r\n                        <li><h3>Height: {info.height}cm</h3></li>\r\n                        <li><h3>Mass: {info.mass}kg</h3></li>\r\n                        <li><h3>Hair Color: {info.hair_color}</h3></li>\r\n                        <li><h3>Eye Color: {info.eye_color}</h3></li>\r\n                    </ul>\r\n                </div>\r\n                \r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default CharInfo;","import React, { Component } from 'react';\r\nimport CharInfo from './CharInfo';\r\n\r\nclass CharacterList extends Component {\r\n    render() {\r\n        const people = this.props.people;\r\n        return(\r\n          <div className=\"char-section\">\r\n            {\r\n                people.map((p) => {\r\n                    return (\r\n                        <div key={p.url}>\r\n                            <h2 className=\"char-name\">{p.name}</h2>\r\n                            <CharInfo charInfo={p} />\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default CharacterList;","import React, { Component } from 'react';\nimport './App.css';\nimport CharacterList from '../components/CharacterList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      people: [],\n    }\n\n    this.getPeople = this.getPeople.bind(this);\n  }\n\n  getPeople() {\n    return fetch('https://swapi.py4e.com/api/people')\n    .then((response) => response.json())\n    .then(data => {\n      this.setState({ people: data.results })\n    })\n  }\n\n  componentDidMount() {\n    this.getPeople()\n  }\n  render() {\n    const {people} = this.state;\n    return(\n      <div className=\"App\">\n        <CharacterList people = {people} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}